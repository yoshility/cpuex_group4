type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | AST
  | SLASH
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF
  | FUN
  | RIGHTARROW

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
# 45 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* AST *);
  264 (* SLASH *);
  265 (* MINUS_DOT *);
  266 (* PLUS_DOT *);
  267 (* AST_DOT *);
  268 (* SLASH_DOT *);
  269 (* EQUAL *);
  270 (* LESS_GREATER *);
  271 (* LESS_EQUAL *);
  272 (* GREATER_EQUAL *);
  273 (* LESS *);
  274 (* GREATER *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  279 (* LET *);
  280 (* IN *);
  281 (* REC *);
  282 (* COMMA *);
  283 (* ARRAY_CREATE *);
  284 (* DOT *);
  285 (* LESS_MINUS *);
  286 (* SEMICOLON *);
  287 (* LPAREN *);
  288 (* RPAREN *);
    0 (* EOF *);
  289 (* FUN *);
  290 (* RIGHTARROW *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  278 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\004\000\004\000\
\005\000\005\000\006\000\006\000\007\000\007\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\006\000\002\000\003\000\003\000\
\003\000\003\000\006\000\005\000\004\000\002\000\001\000\008\000\
\007\000\003\000\003\000\006\000\001\000\004\000\002\000\001\000\
\002\000\001\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\037\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\010\000\022\000\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\039\000\000\000\000\000\000\000\013\000\
\014\000\000\000\000\000\025\000\026\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\016\000\017\000\054\000\030\000\049\000\018\000\056\000"

let yysindex = "\005\000\
\101\255\000\000\000\000\000\000\000\000\000\000\101\255\101\255\
\101\255\101\255\000\000\252\254\096\255\057\255\241\254\149\002\
\001\255\239\254\000\000\000\000\000\000\045\002\003\255\254\254\
\000\255\111\255\000\000\146\255\241\254\247\254\101\255\101\255\
\101\255\101\255\101\255\101\255\101\255\101\255\101\255\101\255\
\101\255\101\255\101\255\101\255\101\255\101\255\255\254\022\255\
\096\255\101\255\101\255\101\255\241\254\007\255\026\255\238\254\
\025\255\022\255\000\000\000\000\101\255\118\255\118\255\000\000\
\000\000\118\255\118\255\000\000\000\000\062\255\062\255\062\255\
\062\255\062\255\062\255\236\255\149\002\101\255\022\255\236\255\
\071\002\097\002\050\255\101\255\053\255\055\255\065\255\101\255\
\149\002\174\255\101\255\101\255\101\255\149\002\000\000\000\000\
\101\255\202\255\054\255\175\002\149\002\149\002\123\002\000\000\
\101\255\101\255\175\002\149\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\082\000\
\093\000\177\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\248\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\121\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\149\000\000\000\000\000\000\000\205\000\233\000\000\000\
\000\000\005\001\037\001\000\000\000\000\058\001\084\001\112\001\
\140\001\168\001\196\001\203\001\240\000\000\000\065\000\216\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\001\000\000\000\000\000\000\000\000\002\002\000\000\000\000\
\000\000\000\000\001\000\230\001\012\002\061\255\000\000\000\000\
\000\000\000\000\244\001\017\002"

let yygindex = "\000\000\
\003\000\002\000\000\000\227\255\000\000\000\000\000\000"

let yytablesize = 969
let yytable = "\060\000\
\007\000\004\000\005\000\006\000\040\000\001\000\029\000\086\000\
\050\000\019\000\020\000\021\000\022\000\087\000\026\000\052\000\
\028\000\023\000\048\000\053\000\024\000\055\000\011\000\083\000\
\061\000\040\000\025\000\058\000\047\000\078\000\084\000\014\000\
\042\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\057\000\079\000\085\000\080\000\081\000\082\000\088\000\
\003\000\004\000\005\000\006\000\007\000\008\000\093\000\089\000\
\041\000\009\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\095\000\010\000\096\000\097\000\011\000\012\000\
\090\000\047\000\105\000\013\000\038\000\000\000\094\000\014\000\
\027\000\015\000\098\000\000\000\008\000\100\000\101\000\102\000\
\004\000\005\000\006\000\103\000\003\000\004\000\005\000\006\000\
\007\000\008\000\000\000\107\000\108\000\009\000\000\000\004\000\
\005\000\006\000\000\000\000\000\000\000\011\000\000\000\010\000\
\030\000\000\000\011\000\012\000\033\000\034\000\014\000\013\000\
\037\000\038\000\000\000\014\000\011\000\015\000\000\000\000\000\
\000\000\000\000\057\000\000\000\000\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\045\000\000\000\000\000\000\000\046\000\
\031\000\059\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\000\000\000\000\000\000\046\000\012\000\099\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\045\000\000\000\000\000\000\000\046\000\
\011\000\104\000\000\000\000\000\000\000\000\000\000\000\034\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\000\000\000\000\
\000\000\007\000\007\000\007\000\024\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\000\000\007\000\007\000\007\000\029\000\
\007\000\000\000\007\000\000\000\007\000\000\000\007\000\007\000\
\007\000\042\000\042\000\042\000\023\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\042\000\042\000\042\000\000\000\
\042\000\015\000\042\000\000\000\000\000\000\000\042\000\042\000\
\042\000\041\000\041\000\041\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\016\000\041\000\041\000\041\000\000\000\
\041\000\000\000\041\000\000\000\000\000\000\000\041\000\041\000\
\041\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\019\000\
\008\000\008\000\000\000\000\000\008\000\000\000\008\000\000\000\
\000\000\000\000\008\000\000\000\008\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\020\000\030\000\030\000\000\000\000\000\
\030\000\000\000\030\000\000\000\000\000\000\000\030\000\000\000\
\030\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\017\000\
\035\000\035\000\000\000\000\000\035\000\000\000\035\000\000\000\
\000\000\000\000\035\000\000\000\035\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\018\000\031\000\031\000\000\000\000\000\
\031\000\000\000\044\000\000\000\000\000\000\000\031\000\000\000\
\031\000\012\000\012\000\000\000\000\000\012\000\012\000\043\000\
\000\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\
\012\000\012\000\000\000\000\000\012\000\021\000\012\000\000\000\
\000\000\000\000\012\000\000\000\012\000\011\000\011\000\000\000\
\000\000\011\000\011\000\033\000\000\000\011\000\011\000\011\000\
\011\000\011\000\011\000\000\000\011\000\011\000\000\000\000\000\
\011\000\028\000\011\000\034\000\034\000\000\000\011\000\034\000\
\011\000\024\000\024\000\027\000\000\000\024\000\024\000\034\000\
\032\000\024\000\024\000\024\000\024\000\024\000\024\000\000\000\
\024\000\024\000\000\000\000\000\024\000\000\000\024\000\000\000\
\000\000\000\000\024\000\000\000\024\000\000\000\000\000\000\000\
\000\000\023\000\023\000\029\000\029\000\023\000\023\000\029\000\
\000\000\023\000\023\000\023\000\023\000\023\000\023\000\029\000\
\023\000\023\000\000\000\000\000\023\000\000\000\023\000\000\000\
\000\000\000\000\023\000\000\000\023\000\000\000\015\000\015\000\
\015\000\015\000\015\000\015\000\000\000\015\000\015\000\000\000\
\000\000\015\000\000\000\015\000\000\000\000\000\000\000\015\000\
\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\000\016\000\016\000\016\000\016\000\016\000\000\000\016\000\
\016\000\000\000\000\000\016\000\000\000\016\000\000\000\000\000\
\000\000\016\000\000\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\019\000\019\000\019\000\019\000\
\019\000\019\000\000\000\019\000\019\000\000\000\000\000\019\000\
\000\000\019\000\000\000\000\000\000\000\019\000\000\000\019\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\020\000\020\000\020\000\020\000\020\000\020\000\000\000\020\000\
\020\000\000\000\000\000\020\000\000\000\020\000\000\000\000\000\
\000\000\020\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\000\017\000\017\000\017\000\
\017\000\017\000\000\000\017\000\017\000\000\000\000\000\017\000\
\000\000\017\000\000\000\000\000\000\000\017\000\000\000\017\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\
\018\000\000\000\000\000\018\000\000\000\018\000\044\000\044\000\
\000\000\018\000\044\000\018\000\044\000\000\000\000\000\000\000\
\044\000\000\000\044\000\043\000\043\000\000\000\000\000\043\000\
\000\000\043\000\000\000\000\000\000\000\043\000\000\000\043\000\
\000\000\021\000\021\000\000\000\000\000\021\000\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\021\000\000\000\033\000\
\033\000\000\000\000\000\033\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\033\000\000\000\028\000\028\000\000\000\
\000\000\028\000\000\000\000\000\000\000\000\000\000\000\027\000\
\027\000\028\000\000\000\027\000\032\000\032\000\000\000\000\000\
\032\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\
\032\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\000\000\
\051\000\000\000\000\000\000\000\000\000\000\000\045\000\000\000\
\000\000\000\000\046\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\000\000\000\000\091\000\000\000\000\000\000\000\000\000\
\045\000\000\000\000\000\000\000\046\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\000\000\000\000\000\000\000\000\000\000\
\092\000\000\000\045\000\000\000\000\000\000\000\046\000\031\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\000\000\000\000\000\000\
\000\000\000\000\106\000\000\000\045\000\000\000\000\000\000\000\
\046\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\000\000\
\000\000\000\000\046\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000"

let yycheck = "\029\000\
\000\000\001\001\002\001\003\001\013\001\001\000\022\001\026\001\
\026\001\007\000\008\000\009\000\010\000\032\001\013\000\013\001\
\014\000\022\001\017\000\022\001\025\001\022\001\022\001\053\000\
\034\001\034\001\031\001\026\000\028\001\031\001\024\001\031\001\
\000\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\028\001\049\000\026\001\050\000\051\000\052\000\031\001\
\000\001\001\001\002\001\003\001\004\001\005\001\013\001\061\000\
\000\000\009\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\022\001\019\001\022\001\013\001\022\001\023\001\
\078\000\000\000\029\001\027\001\024\001\255\255\084\000\031\001\
\032\001\033\001\088\000\255\255\000\000\091\000\092\000\093\000\
\001\001\002\001\003\001\097\000\000\001\001\001\002\001\003\001\
\004\001\005\001\255\255\105\000\106\000\009\001\255\255\001\001\
\002\001\003\001\255\255\255\255\255\255\022\001\255\255\019\001\
\000\000\255\255\022\001\023\001\007\001\008\001\031\001\027\001\
\011\001\012\001\255\255\031\001\022\001\033\001\255\255\255\255\
\255\255\255\255\028\001\255\255\255\255\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\026\001\255\255\255\255\255\255\030\001\
\000\000\032\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\255\255\255\255\255\255\030\001\000\000\032\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\026\001\255\255\255\255\255\255\030\001\
\000\000\032\001\255\255\255\255\255\255\255\255\255\255\000\000\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\022\001\000\000\
\024\001\255\255\026\001\255\255\028\001\255\255\030\001\031\001\
\032\001\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\022\001\255\255\
\024\001\000\000\026\001\255\255\255\255\255\255\030\001\031\001\
\032\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\022\001\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\031\001\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\255\255\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\255\255\255\255\
\024\001\255\255\000\000\255\255\255\255\255\255\030\001\255\255\
\032\001\005\001\006\001\255\255\255\255\009\001\010\001\000\000\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\255\255\255\255\024\001\000\000\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\005\001\006\001\255\255\
\255\255\009\001\010\001\000\000\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\255\255\255\255\
\024\001\000\000\026\001\020\001\021\001\255\255\030\001\024\001\
\032\001\005\001\006\001\000\000\255\255\009\001\010\001\032\001\
\000\000\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\255\255\255\255\255\255\
\255\255\005\001\006\001\020\001\021\001\009\001\010\001\024\001\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\032\001\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\020\001\021\001\255\255\
\255\255\024\001\255\255\026\001\255\255\255\255\255\255\030\001\
\255\255\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\255\255\030\001\255\255\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\255\255\030\001\255\255\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\020\001\021\001\
\255\255\030\001\024\001\032\001\026\001\255\255\255\255\255\255\
\030\001\255\255\032\001\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\255\255\030\001\255\255\032\001\
\255\255\020\001\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\255\255\255\255\030\001\255\255\032\001\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\030\001\255\255\032\001\255\255\020\001\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\020\001\
\021\001\032\001\255\255\024\001\020\001\021\001\255\255\255\255\
\024\001\255\255\255\255\032\001\255\255\255\255\255\255\255\255\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\255\255\255\255\255\255\255\255\255\255\026\001\255\255\
\255\255\255\255\030\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\021\001\255\255\255\255\255\255\255\255\
\026\001\255\255\255\255\255\255\030\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\026\001\255\255\255\255\255\255\
\030\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\026\001\255\255\
\255\255\255\255\030\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  AST\000\
  SLASH\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  FUN\000\
  RIGHTARROW\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 67 "parser.mly"
    ( _2 )
# 454 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
    ( Unit (Parsing.symbol_start_pos()))
# 460 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 71 "parser.mly"
    ( Bool(_1, Parsing.symbol_start_pos()) )
# 467 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 73 "parser.mly"
    ( Int(_1,Parsing.symbol_start_pos()) )
# 474 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 75 "parser.mly"
    ( Float(_1,Parsing.symbol_start_pos()) )
# 481 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 77 "parser.mly"
    ( Var(_1,Parsing.symbol_start_pos()) )
# 488 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 79 "parser.mly"
    ( Get(_1, _4,Parsing.symbol_start_pos()) )
# 496 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 83 "parser.mly"
    ( _1 )
# 503 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 86 "parser.mly"
    ( Not(_2,Parsing.symbol_start_pos()) )
# 510 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 89 "parser.mly"
    ( match _2 with
    | Float(f,p) -> Float(-.f,p) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e,Parsing.symbol_start_pos()) )
# 519 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 93 "parser.mly"
    ( Add(_1, _3,Parsing.symbol_start_pos()) )
# 527 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 95 "parser.mly"
    ( Sub(_1, _3,Parsing.symbol_start_pos()) )
# 535 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 97 "parser.mly"
    ( Mul(_1, _3,Parsing.symbol_start_pos()) )
# 543 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 99 "parser.mly"
    ( Div(_1, _3,Parsing.symbol_start_pos()) )
# 551 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 101 "parser.mly"
    ( Eq(_1, _3,Parsing.symbol_start_pos()) )
# 559 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 103 "parser.mly"
    ( Not(Eq(_1, _3,Parsing.symbol_start_pos()),Parsing.symbol_start_pos()) (* some float comparisons differ from OCaml for NaN; see: https://github.com/esumii/min-caml/issues/13#issuecomment-1147032750 *) )
# 567 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 105 "parser.mly"
    ( Not(LE(_3, _1,Parsing.symbol_start_pos()),Parsing.symbol_start_pos()) )
# 575 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 107 "parser.mly"
    ( Not(LE(_1, _3,Parsing.symbol_start_pos()),Parsing.symbol_start_pos()) )
# 583 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 109 "parser.mly"
    ( LE(_1, _3,Parsing.symbol_start_pos()) )
# 591 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 111 "parser.mly"
    ( LE(_3, _1,Parsing.symbol_start_pos()) )
# 599 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
    ( If(_2, _4, _6,Parsing.symbol_start_pos()) )
# 608 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 117 "parser.mly"
    ( FNeg(_2,Parsing.symbol_start_pos()) )
# 615 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 119 "parser.mly"
    ( FAdd(_1, _3,Parsing.symbol_start_pos()) )
# 623 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 121 "parser.mly"
    ( FSub(_1, _3,Parsing.symbol_start_pos()) )
# 631 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 123 "parser.mly"
    ( FMul(_1, _3,Parsing.symbol_start_pos()) )
# 639 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 125 "parser.mly"
    ( FDiv(_1, _3,Parsing.symbol_start_pos()) )
# 647 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 128 "parser.mly"
    ( Let(addtyp _2, _4, _6,Parsing.symbol_start_pos()) )
# 656 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 131 "parser.mly"
    ( LetRec(_3, _5,Parsing.symbol_start_pos()) )
# 664 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 135 "parser.mly"
    ( LetRec({name = addtyp (Id.genid2 "f"); args = _2; body = _4}, Var((Id.genid "f"),Parsing.symbol_start_pos()),Parsing.symbol_start_pos()) )
# 672 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 138 "parser.mly"
    ( App(_1, _2,Parsing.symbol_start_pos()) )
# 680 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 141 "parser.mly"
    ( Tuple(_1,Parsing.symbol_start_pos()) )
# 687 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 143 "parser.mly"
    ( LetTuple(_3, _6, _8,Parsing.symbol_start_pos()) )
# 696 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 145 "parser.mly"
    ( Put(_1, _4, _7,Parsing.symbol_start_pos()) )
# 705 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 147 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3,Parsing.symbol_start_pos()) )
# 713 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 150 "parser.mly"
    ( Array(_2, _3,Parsing.symbol_start_pos()) )
# 721 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 153 "parser.mly"
    ( Let(addtyp _2, _4, _6,Parsing.symbol_start_pos()) )
# 730 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
    ( Printf.fprintf stdout "line %d\n" (Parsing.symbol_start_pos()).pos_lnum;
    failwith
        (Printf.sprintf "parse error near characters %d-%d"
           (Parsing.symbol_start ())
           (Parsing.symbol_end ()))
           )
# 741 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 164 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 750 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 167 "parser.mly"
    ( addtyp _1 :: _2 )
# 758 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 169 "parser.mly"
    ( [addtyp _1] )
# 765 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 174 "parser.mly"
    ( _1 @ [_2] )
# 773 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 177 "parser.mly"
    ( [_1] )
# 780 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 181 "parser.mly"
    ( _1 @ [_3] )
# 788 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 183 "parser.mly"
    ( [_1; _3] )
# 796 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 187 "parser.mly"
    ( _1 @ [addtyp _3] )
# 804 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 189 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 812 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
